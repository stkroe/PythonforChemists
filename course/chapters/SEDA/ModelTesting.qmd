---
title: "Model Testing"
execute: 
  echo: True
  eval: True
  error: True
other-links: 
      - text: "Download Code"
        href: https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/notebooks/ModelTesting.ipynb"
        icon: "journal"
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/ModelTesting.ipynb"
        icon: "laptop"
--- 



### Hypothesis Testing  {.unnumbered}


Hypothesis testing is a statistical method for making decisions or inferences about a population based on a sample. It is widely used in chemistry and materials science to validate experimental results and compare datasets.

- **Null & Alternative Hypothesis:** The null hypothesis (H₀) assumes no effect, while the alternative hypothesis (H₁) suggests a significant difference.

- **t-tests:** Used to compare the means of two groups (one-sample, independent, paired t-tests).

```{python}
# Example: Null hypothesis - The mean is equal to 0
#H0: μ = 0

# Alternative hypothesis - The mean is not equal to 0
#H1: μ ≠ 0

data = [1, 2, 3, 4, 5]

# Perform a one-sample t-test
t_stat, p_value = stats.ttest_1samp(data, 0)

# Print results
print(f"T-Statistic: {t_stat:.4f}, P-Value: {p_value:.4f}")

# Interpretation
if p_value < 0.05:
    print("Reject the null hypothesis: The mean is significantly different from 0.")
else:
    print("Fail to reject the null hypothesis: No significant difference from 0.")

```

```{python}
# Generate two random samples (e.g., control and treatment groups)
np.random.seed(42)
control = np.random.normal(loc=50, scale=10, size=30)  # Mean=50, Std=10
treatment = np.random.normal(loc=55, scale=10, size=30)  # Mean=55, Std=10

# Perform an independent t-test
t_stat, p_value = stats.ttest_ind(control, treatment)

# Print results
print(f"T-Statistic: {t_stat:.4f}, P-Value: {p_value:.4f}")

# Interpretation
if p_value < 0.05:
    print("Reject the null hypothesis: The groups have significantly different means.")
else:
    print("Fail to reject the null hypothesis: No significant difference between groups.")
```

```{python}
# Generate paired data (e.g., before and after measurements)
np.random.seed(42)
before = np.random.normal(loc=50, scale=10, size=30)  # Mean=50, Std=10
after = before + np.random.normal(loc=5, scale=2, size=30)  # Mean=55, Std=2

# Perform a paired t-test
t_stat, p_value = stats.ttest_rel(before, after)

# Print results
print(f"T-Statistic: {t_stat:.4f}, P-Value: {p_value:.4f}")

# Interpretation
if p_value < 0.05:
    print("Reject the null hypothesis: The means are significantly different.")
else:
    print("Fail to reject the null hypothesis: No significant difference between means.")
```


- **ANOVA (Analysis of Variance):** Compares means of multiple groups to check for significant differences.


```{python}
from scipy import stats

# Example: Comparing multiple groups
group1 = [10.2, 14.5, 13.3, 9.8, 12.7]
group2 = [9.5, 13.1, 12.9, 8.7, 11.3]
group3 = [11.2, 15.1, 14.3, 10.8, 13.7]

# Perform ANOVA test
f_stat, p_value = stats.f_oneway(group1, group2, group3)
print(f"F-statistic: {f_stat}, P-value: {p_value}")
```


- **Chi-square Test:** Used for categorical data to examine associations between different groups.

```{python}
from scipy.stats import chi2_contingency

# Example: Comparing categorical data
observed = [[10, 20, 30], [6, 9, 17]]
chi2, p, dof, expected = chi2_contingency(observed)
print(f"Chi-square: {chi2}, P-value: {p}")

```


Check the [SciPy documentation](https://docs.scipy.org/doc/scipy/reference/stats.html) for more statistical tests and functions.

And for more information on hypothesis testing, refer to the [SciPy Hypothesis Tests](https://docs.scipy.org/doc/scipy/tutorial/stats/hypothesis_tests.html).

### Outlier Detection {.unnumbered}

Outliers are data points that significantly differ from other observations in a dataset. 
They have effect on specific statistical methods and can lead to incorrect conclusions.

- **Z-Score:** Measures how many standard deviations a data point is from the mean.

```{python}
# Calculate Z-scores for a dataset
data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
z_scores = stats.zscore(data)
print(z_scores)
```

- **IQR (Interquartile Range):** Identifies outliers based on the spread of the data.

```{python}
# Calculate IQR for a dataset
q1 = np.percentile(data, 25)
q3 = np.percentile(data, 75)
iqr = q3 - q1

# Define outlier thresholds
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Identify outliers
outliers = data[(data < lower_bound) | (data > upper_bound)]
print(outliers)


```


- **DBSCAN (Density-Based Spatial Clustering of Applications with Noise):** Clustering algorithm that identifies outliers based on density.

```{python}
from sklearn.cluster import DBSCAN

# Generate sample data
data = np.random.randn(100, 2)

# Fit DBSCAN model
dbscan = DBSCAN(eps=0.3, min_samples=5)
dbscan.fit(data)

# Identify outliers
outliers = data[dbscan.labels_ == -1]
print(outliers)
```

- **Isolation Forest:** Anomaly detection algorithm that isolates outliers in a dataset.

```{python}
from sklearn.ensemble import IsolationForest

# Generate sample data
data = np.random.randn(100, 2)

# Fit Isolation Forest model
isoforest = IsolationForest(contamination=0.1)
isoforest.fit(data)

# Identify outliers
outliers = data[isoforest.predict(data) == -1]
print(outliers)
```

- **Boxplot:** Visual representation of outliers in a dataset.

```{python}
# Generate sample data
data = np.random.randn(100)

# Create boxplot
plt.boxplot(data)
plt.show()
```

For more information on outlier detection, refer to the [Scikit-learn documentation](https://scikit-learn.org/stable/modules/outlier_detection.html).