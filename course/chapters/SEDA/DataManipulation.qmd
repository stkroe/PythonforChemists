---
title: "Data Manipulation"
execute: 
  echo: True
  eval: True
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/DataManipulation.ipynb"
        icon: "laptop"
      - text: "Download Code"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/DataManipulation.ipynb"
        icon: "journal"
--- 
Difficulty level: <span style="color:#2B7492">{{< bi star-fill >}} </span>

# Data Manipulation {.unnumbered}

## Numpy{.unnumbered}
```{python}
import numpy as np
```

### Array manipulation {.unnumbered}
Often data has to be manipulated before it can be analyzed. <br> 
Numpy has many methods for array manipulation. <br> 

For example, 

- the shape of an array can be changed,
- multiple arrays can be concatenated, 
- the elements of an array can be sorted
- non valid values NaN can be removed, 
- linear algebra operations can be performed,

etc.

#### Sort arrays: {.unnumbered}

```{python}
unsorted_arr = np.array([[3, 1, 5, 2, 4], [5, 2, 0, 8, 1], [3, 2, 9, 4 , 5]])
print("unsortd_arr: \n", unsorted_arr)
sorted_arr = np.sort(unsorted_arr,axis = 0) # sorted along the column
print("sorted_arr along columns: \n" , sorted_arr)
sorted_arr = np.sort(unsorted_arr,axis = 1) # sorted along the row
print("sorted_arr along rows: \n" , sorted_arr)
```

#### Concatenate arrays: {.unnumbered}
```{python}
a = np.array([1, 2, 3]) 
b = np.array([4, 5, 6])
c = np.concatenate((a, b))
print(c)
```

#### Reshape arrays: {.unnumbered}

```{python}
a = np.array([[1, 2],[3, 4],[5, 6]])
b = np.array([[7, 8],[9, 10],[11, 12]])
c = np.vstack((a, b)) # vertical stack
d = np.hstack((a, b)) # horizontal stack
print("vertical stack: \n", c)
print("horizontal stack: \n", d)
print("flatten array: \n", c.flatten())
```

#### Linear algebra operations *e.g.*: {.unnumbered}

- `np.log(a)` returns the **natural logarithm** of an array
- `np.log10(a)` returns the **base 10 logarithm** of an array
- `np.log2(a)` returns the **base 2 logarithm** of an array
- `np.log1p(a)` returns the **natural logarithm** of an array plus one
- `np.exp(a)` returns the **exponential** of an array
- `np.sqrt(a)` returns the **square root** of an array
- `np.abs(a)` returns the **absolute value** of an array
- `np.sum(a)` returns **element-wise sum** of two arrays
- `np.add(a)` returns **sum of all elements** arrays
- `np.subtract(a,b)` returns the **difference** of two arrays
- `np.multiply(a,b)` returns the **product** of two arrays
- `np.divide(a,b)` returns the **division** of two arrays
- `np.dot(a,b)` returns the **dot product** of two arrays
- `np.cross(a,b)` returns the **cross product** of two arrays
- `np.linalg.inv(a)` returns the **inverse of a matrix**
- `np.linalg.det(a)` returns the **determinant of a matrix**
- `np.linalg.eig(a)` returns the **eigenvalues and eigenvectors** of a matrix
- `np.linalg.solve(a,b)` returns the **solution of a linear system of equations**
- `np.convolv(a,b)` returns the **convolution** of two arrays



```{python}
a = np.array([[1, 2],[3, 4],[5, 6]])
b = np.array([[7, 8],[9, 10],[11, 12]])
c = np.sum(a) # sum of all elements
print("Summ of all elements: ", c)
c = np.add(a,b) # element wise addition
print("Element wise addition: ", c)
```


:::{.callout-information}
#### Question:
What does the following code snippet do?
```{python}
#| eval: false

temperatures = np.array([20, 30, 40, 50, 60, 70, 80, 90, 100])
window = 3
np.convolve(temperatures,np.ones(window) / window,
                            mode='valid')
```
:::

If you are not sure, look in the numpy documentation, ask AI, search in the internet or try it out in a code cell.

:::{.callout-important}
#### Answer:
The code snippet calculates the moving average of the temperatures with a window size of 3.
:::



---


## Pandas {.unnumbered}


```{python}
import pandas as pd
data = pd.DataFrame({
    "Name": ["Water", "Sulfuric Acid", "Ethanol", "Acetone", "Ammonia", "Benzene", "Methanol", "Glycerol"],
    "Formula": ["H2O", "H2SO4", "C2H5OH", "C3H6O", "NH3", "C6H6", "CH3OH", "C3H8O3"],
    "Molecular Weight (g/mol)": [18.015, 98.079, 46.07, 58.08, 17.03, 78.11, 32.04, 92.09],
    "Viscosity (mPa·s)": [1.002, 24.0, 1.2, 0.32, 0.26, 0.65, 0.544, 1412],
    "pH (Acidity)": [7, 1, 7.33, 7, 11.6, 7, 7.4, 5.5],
    "Chemical Type": ["Inorganic", "Acid", "Alcohol", "Ketone", "Base", "Aromatic Hydrocarbon", "Alcohol", "Polyol"],
    "Concentration (M)": [55.5, 18.0, 1.0, 0.8, 0.5, 0.1, 1.5, 1.2]})
```

```{python}
print("head of data: \n",data.head()) # print the first 5 rows
print("\n")
print("Number of data set: \n", data.shape[0]) # number of data set
print("\n")
print("Column Name: \n", data["Name"]) # print the column "Name"
print("\n")
print("2. Row: \n", data.iloc[1]) # print the second row
```

#### Select subsets of the data: {.unnumbered}

Often you need only a specific part of your data with `pandas`it is quite easy to filter the data after specific properties.

```{python}
# filter the rows where concentration is greater than 5
print("Filter the rows where concentration is greater than 5: \n", data[data["Concentration (M)"] > 5]) 
print("\n")
# get the chemical type with a concentration higher than 5
print("Get the chemical type with a concentration higher than 5: \n", 
      data.loc[data["Concentration (M)"]>5,"Chemical Type"])
print("\n")
```



### Manipulate data {.unnumbered}

You can
- `df.copy()`: copy the data
- `df.drop(columns=[...])`: drop columns
- `df.drop(index=[...])`: drop rows
- `df.drop_duplicates()`: drop duplicates
- `df.fillna(...)`: fill NaNs
- `df.dropna()`: drop NaNs
- `df.replace(...)`: replace values
- `pd.concat([df1, df2])`: concatenate data (concatenate along the rows)
- `pd.concat([df1, df2], axis=1)`: concatenate data (concatenate along the columns)
- `pd.merge(df1, df2)`: merge data in the sense of inner, outer, left, right join, see [pandas documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html)
- `df.agg(...)`: aggregate the data
- `df.transform(...)`: transform the data 
- `df.value_counts()`: count the values
- `df.apply(...)`: apply a function to the data
- `df.groupby(...)`: group the data and perform operations on the groups
- `df.sort_values(...)`: sort the data
- `df.shift(...)`: shift the data
- `df.diff(...)`: get the difference between the data
- `df.ptc_shift(...)`: get the percentage change between the data
- `df.to_numpy()`: convert the dataframe to a numpy array
- `pd.DataFrame(arr)`: convert the numpy array to a dataframe
etc.

#### Copy and concatenate data: {.unnumbered}
```{python}
data2 = data.copy()
data2["Concentration 2 (M)"] = data2["Concentration (M)"] + 10 # increase the concentration by 10 M
print("data2: \n" , data2)


data3 = pd.concat([data, data2]) # concatenate the dataframes
print("concated data: \n", data3)
```

```{python}
 # create a Panda Series
acidity = pd.Series(["basic", "acid", "basic", "neutral",
                    "acid", "acid", "basic", "basic"], name="Aciditiy Type")
print("acidity: \n",acidity)
# concatenate the dataframes
data4 = pd.concat([data3, acidity], axis=1) 
print("concated data: \n", data4)
```

#### Drop columns and rows: {.unnumbered}
```{python}
data4 = data4.drop(columns=["Concentration 2 (M)"]) # drop the column "Concentration 2 (M)"
print("data4: \n", data4)

data5 = data4.drop(index=[0, 1]) # drop the rows with index 0 and 1
print("data5: \n", data5)

data6 = data5.drop(columns=["Aciditiy Type"]) # drop the column "Aciditiy Type"
print("data6: \n", data6)
```



#### Drop duplicates, fill NaNs and drop NaNs {.unnumbered}
```{python}
data5 = data4.drop_duplicates() # drop the duplicates
print("data5: \n", data5)

data6 = data5.fillna(0) # fill the NaNs with 0
print("data6: \n", data6)

data7 = data5.dropna() # drop the NaNs
print("data7: \n", data7)
```

#### Replace values: {.unnumbered}
```{python}
# replace the values
data6["Aciditiy Type"].replace({"acid": "Acidic", "basic": "Basic", "neutral": "Neutral"}, inplace=True)
print("data6: \n", data6)
```

### Count the values {.unnumbered}

```{python}
# count the chemicals with different concentration
print("Count the chemicals with the different concentrations \n", data["Concentration (M)"].value_counts())
```

### Appply a function to the data {.unnumbered}
```{python}
print("Apply a function to the data: \n", data["Concentration (M)"].apply(lambda x: x*2))
```

### Transform data {.unnumbered}

```{python}
# transform the data
data6["Concentration (M)"] = data6["Concentration (M)"].transform(lambda x: x*2)
print("data6: \n", data6)
```

### Sort data

```{python}
print("sorted after concentration: ",data.sort_values(by="Concentration (M)", ascending=True))
```

### Group data 

In pandas you can group data by a specific column and perform operations on the groups.

```{python}
# sum of concentration by filter
print("sum of concentration: \n", data["Concentration (M)"].sum()) 
# sum of concentration group by type
print("Sum of concentration group by type: \n", data.groupby("Chemical Type")["Concentration (M)"].sum())
```

### Transform Pandas DataFrame to Numpy Array and viceversa {.unnumbered}


```{python}
print("Names: ", data5.columns)
df = data5.copy()
print(len(df))
# convert the dataframe to a numpy array
arr = df.to_numpy() 
print("arr: \n", arr)
# convert the numpy array to a dataframe
df2 = pd.DataFrame(arr, columns=["Name", "Formula", "Molecular Weight (g/mol)","Viscosity (mPa·s)","pH (Acidity)","Chemical Type","Concentration (M)", "Aciditiy Type"])
print("df2: \n", df2)
```


