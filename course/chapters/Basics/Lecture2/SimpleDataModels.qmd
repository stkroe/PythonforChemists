---
title: "Simple Data Models"
execute: 
  echo: True
  eval: True
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/SimpleDataModelling.ipynb"
        icon: "laptop"
--- 

## Linear RegressionÂ {.unnumbered}

Often we want to find a model which can explain the data.
It is important to understand the data and the model to be able to interpret the results and make predictions.

The simplest model is the linear regression model. It assumes that the data has a linear relationship with the target variable. The model is defined as:

$$
y = \beta_0 + \beta_1 x_1 + \beta_2 x_2 + \ldots + \beta_n x_n + \epsilon
$$

where $y$ is the target variable, $x_1, x_2, \ldots, x_n$ are the features, $\beta_0, \beta_1, \ldots, \beta_n$ are the coefficients, and $\epsilon$ is the error term.


In `python` there exists serveral libraries which can be used to fit a linear regression model.


A easy way is to use `scipy` library. The `scipy` library has a function called `linregress` which can be used to fit a linear regression model. The function returns the slope, intercept, r-value, p-value, and the standard error of the estimate.

```{python}
from scipy.stats import linregress
import numpy as np

x = [1, 2, 3, 4, 5]
y = np.random.normal(0, 1, 5)

slope, intercept, r_value, p_value, std_err = linregress(x, y)

print("slope: %f    intercept: %f" % (slope, intercept))
print("R-squared: %f" % r_value**2)
print("p-value: %f" % p_value)
print("standard error: %f" % std_err)
```


 One of the most popular libraries is `scikit-learn`. The following code shows how to fit a linear regression model using `scikit-learn`:


```{python}
from sklearn.linear_model import LinearRegression

# Create a linear regression model
model = LinearRegression()

# Fit the model
model.fit(X, y)
```
