{
  "hash": "48ea4ab7ef69b9bf528cb8a43c76475e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Simple Data Inspection\"\nformat: live-html\nengine: jupyter\nexecute: \n  echo: True\n  eval: True\ncode-links:\n      - text: \"Open in Colab\"\n        href: \"https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/SimpleDataInspection.ipynb\"\n        icon: \"laptop\"\n--- \n\n\n\n\n\n\n## Inspection of Data {.unnumbered}\n\n\nAfter you load your data you have to inspect it to:\n- check if no data is consistent, no missing values\n- check if the data is in the correct format\n- check if the data is in the correct range\n- check if the data is in the correct distribution\n- get first insights into the data\n\n\n### Pandas {.unnumbered}\n\n\n#### Overview of the Data {.unnumbered}\n\n\nYou can use the `head()` function to get a quick overview of the first rows of the data.\n\n\n\n\n\n```{pyodide}\nimport pandas as pd\n\ndata = pd.read_csv('temperatures.csv',sep=';')\ndata.head()\n```\n\n\n\n\n\nThe `describe()` function gives you a quick overview of the data distribution.\n\n\n\n\n\n```{pyodide}\ndata.describe()\n```\n\n\n\n\n\n\n\n\nThe `describe`function shows you the count, mean, standard deviation, minimum, 25%, 50%, 75% and maximum values of the data.\n\nIn this case, data has 44640 data points, The mean of the temperature is 298(6) K. The minimum temperature is 279 K and the maximum temperature is 316 K. Further the 25% quantile is 294 K, the 50% quantile is 298 K and the 75% quantile is 302 K. The measurement was taken from 1 to 44640 seconds which is 12 hours and 24 minutes.\nWe suppose that is the correct time range which was to be expected.\n \nThis gives you a quick overview of the data distribution.\n\n\n#### Missing Data and Corrupted Data {.unnumbered}\n\n\nTo check if there is missing data in the data set you can use the `isna()` function.\n\n\n\n\n\n```{pyodide}\ndata.isna().sum()\n```\n\n\n\n\n\n\n\nNo missing data is found in this case.\n\n\nYou can check the data type using `dtypes` function to check if the data is in the correct format.\n\n\n\n\n\n```{pyodide}\ndata.dtypes\n```\n\n```{pyodide}\ndata.dtypes\n```\n\n\n\n\n\nYou see that `time` is an `int64` and `temperature` is a `float64`.\nFor the analysis, you might want to convert the `time` to a `float64` as well.\n\n\n\n\n\n```{pyodide}\ndata['time'] = data['time'].astype('float64')\n```\n\n```{pyodide}\ndata['time'] = data['time'].astype('float64')\ndata.dtypes\n```\n\n\n\n\n\nIf we have missing data we can use the `fillna()` function to fill the missing data with a specific value.\n\n\n\n\n\n```{pyodide}\ndata.fillna(0)\n```\n\n```{pyodide}\ndata_missing = pd.read_csv('temperatures_nan.dat', header=None, skipinitialspace=True, sep=' ', names=['time', 'temperature'])\ndata_missing.head()\n```\n\n\n\n\n\n\n\n\nOne value is missing in the `temperature` column. We fill it with 0.\n\nFirst let check where the data is missing.\n\n\n\n\n\n```{pyodide}\ndata[data['temperature'].isna()]\n```\n\n\n\n\n\n\ndata_missing[data_missing['temperature'].isna()]\n\n\nAt index 21 at time 22 s the temperature is missing.\n\n:::{.callout-note}\nThe handling of missing data is a complex topic.\nFirst of all you have to check why the data is missing. Is it a measurement error, a data processing error etc.\n\nYou have to decide if you want to fill the missing data with a specific value, drop the row or column or interpolate the missing data. The decision depends on the data and the analysis you want to perform. Droping Data is always a delicate decision because you loose information. Sometimes it is not good scientific practice to drop data. \nFor more information there a lot of research in this topic [https://doi.org/10.1076/edre.7.4.353.8937](https://doi.org/10.1076/edre.7.4.353.8937)\n:::\n\n\nThe time step can be estimated by the difference between the time steps of the previous and the next data point.\n\n\n\n\n\n```{pyodide}\ndata['time'].diff()\n```\n\n\n\n\nAnd we can summarize it via:\n\n\n\n\n\n```{pyodide}\ndata['time'].diff().value_counts()\n```\n\n```{pyodide}\ndata_missing['time'].diff().value_counts()\n```\n\n\n\n\n\nget difference between temperature values\n\n\n\n\n```{pyodide}\ndata_missing[10:30].diff()\n```\n\n\n\n\n\n\nThe time step is constantly 1 second. \nThe difference between the temperature of the previous and the next data point is at $~10^{-2}$ order.\nWe can assume that in this case the data is consistent enough and we can fill the missing data with the mean of the previous and the next data point.\n \n\n\n\n\n```{pyodide}\ndata['temperature'].fillna((data['temperature'].shift() + data['temperature'].shift(-1))/2, inplace=True)\n```\n\n\n\n\n\n\ndata_missing['temperature'].fillna((data_missing['temperature'].shift() + data_missing['temperature'].shift(-1))/2, inplace=True)\ndata_missing[20:25]\n\n\nNow can analysis or plot the data.\n \n\n\n\n\n\n# \n\n",
    "supporting": [
      "SimpleDataInspection_files"
    ],
    "filters": [],
    "includes": {}
  }
}