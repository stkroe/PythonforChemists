---
title: "Installation Guide"
execute:
    echo: false
    eval: false
    collaps: false
---


Here is a short instruction how to install Python on your local PC or you can use [Google Colab](https://colab.research.google.com) to solve all the exercises of this course.

:::{.callout-information}
The use of [Google Colab](https://colab.research.google.com) needs a Google Account. Please read the [Terms of Service](https://research.google.com/colaboratory/tos_v5.html) and [Privacy Policy](https://policies.google.com/privacy)
:::


# How to install Python locally? {.unnumbered}


Fundamental Python websites:

- [Python](https://www.python.org) 
- [Python documentation](https://www.python.org/doc/)


## 1. Install Python Interpreter {.unnumbered}


Your preferred searching engine is your friend to find the best way to install Python on your system.
Please choose that method which is suitable for you.


Python can be install by severals ways:



- directly by [Python](https://www.python.org/downloads/) official site 
    - the installation guide can be found under [python wiki](https://wiki.python.org/moin/BeginnersGuide/Download)
- or via package manager of your os: 
    - *e.g.:* `sudo apt install python` (linux debian) or `brew install python` (macOS)
- or via [docker](https://www.docker.com/), [wsl](https://learn.microsoft.com/de-de/windows/wsl/install) ect.
- or via a [conda](https://docs.conda.io/projects/conda/en/latest/index.html) or [mamba](https://mamba.readthedocs.io/en/latest/index.html) python package and environment managers which have a python interpreter on board and are avaiable for Windows, Linux and macOS [my recomendation]



## 2. Python Package and Environment manager {.unnumbered}


The advantage of using a python package and environment manager is that you have a python interpreter directly on board but you can also directly create different python enviroments and install and remove python packages.


### Conda {.unnumbered}


There are differerent `conda`installer:
(Please pay attention which one is suitable for you ([https://docs.anaconda.com/distro-or-miniconda/](https://docs.anaconda.com/distro-or-miniconda/)).

:::{.callout-warning}
Please read the [Anaconda Terms of Service FAQs](https://www.anaconda.com/pricing/terms-of-service-faqs) and [Terms of Service](https://legal.anaconda.com/policies/en/)) **not** every case is **free** of use. 

:::


- [Anaconda Distribution](https://docs.anaconda.com/anaconda/install/) is a comprehensive distribution which includes conda and hundreds of preinstalled packages and tools.
- [miniconda](https://docs.anaconda.com/free/miniconda/index.html) is the light version of it which contains only conda, python interpreter and few fundamental packages
- [miniforge](https://github.com/conda-forge/miniforge) minimal installer for conda and using only the community [conda-forge](https://conda-forge.org/) channel



### Mamba {.unnumbered}


Another python package and environment managers is [mamba](https://mamba.readthedocs.io/en/latest/index.html).
`mamba` is a reimplementation of `conda`:
 - [micromamba](https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html) is a statically linked version  of `mamba` 
 - `mamba`and it at the moment faster than `conda`


:::{.callout-tip}
 **Recommondation: *micromamba* ** <br>

Install it like it is explained under the micromamba documentation:
- [https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html](https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html)
:::


Please install in one of the above explained ways Python and use your preferred searching enging to get more information.


## 3. Set up an environment {.unnumbered}

It is often very useful to have different python enviroments for different python projects because of the need of different python package versions.

You can use `conda` or `micromamba` to create different environments. There exists also other virtual environment manager.

In this course the explaination is restricted to `micromamba` as an example. If you want to use something else there exists tons of information online how to use other programs.




### Micromamba: Most important commands are: {.unnumbered}


Read for more detail:  [https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html](https://mamba.readthedocs.io/en/latest/user_guide/micromamba.html)



Creating a new virtual environment:


```bash
micromamba create --name <myenvname>
```


Install new packages:


```bash
micromamba install <packagename>
```


List all environments:


```bash
micromamba env list
```


Activate an environment:


```bash
micromamba activate <myenvname>
```


List all packages of this environment:


```bash
micromamba list
```


## 4. Usefull packages for Data Analyse and Visualization:  {.unnumbered}
- [matplotlib](https://matplotlib.org) - data visualization library
- [numpy](https://numpy.org) - numerical library
- [scipy](https://docs.scipy.org/doc/scipy/reference/) - scientific library
- [pandas](https://pandas.pydata.org/docs/) - data manipulation library
- [seaborn](https://seaborn.pydata.org/examples/index.html) - data visualization library
- [scikit-learn](https://scikit-learn.org/stable/) - machine learning library
- [statsmodels](https://www.statsmodels.org/stable/index.html) - statistical library
- [jupyter-notebook/jupyterlab](https://jupyter.org/) - interactive computing environment
- [ipykernel](https://pypi.org/project/ipykernel/) - IPython Kernel for Jupyter
- [pip](https://packaging.python.org/en/latest/guides/tool-recommendations/) - package installer for python instead of conda


:::{.callout-tip}
**Recommendation** <br> 
Use *yml-file* with all needed packages and configurations:
:::


Save this in a *environment.yml* file:


 ```{yml}
 name: myenv
channels:
  - conda-forge
dependencies:
  - python=3.12
  - pandas
  - numpy
  - matplotlib
  - jupyterlab
  - scikit-learn
  - scipy
  - pip
  - ipykernel
  - seaborn
  - statsmodels
 ```


and create an environment with this specific packages:


```bash
micromamba env create -f environment.yml
```


Test your installation by opening the interactive python mode by typing in your terminal (Linux, macOS) / comand prompt (Windows):



```bash
python
``` 


then something like this should be opened in your terminal (Linux, macOS) / comand prompt (Windows)

```bash
Python 3.12.7 | packaged by conda-forge | (main, Oct  4 2024, 15:57:01) [Clang 17.0.6 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
```


then type:


```python
print("Hello World!")
```

If this works your installation was successful!