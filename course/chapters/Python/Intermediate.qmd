---
title: "Python Intermediate"
execute:
    echo: true
    eval: true
    error: true
other-links:     
    - text: "Download Example"
      href: "https://github.com/stkroe/PythonforChemists/blob/main/course/examples/notebooks/ex1.zip"
      icon: "zip"
    - text: "Open Example in Colab"
      href: "https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/notebooks/ex1/material/student/BasicExercises.ipynb"
      icon: "laptop"
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/Intermediate.ipynb"
        icon: "laptop"
      - text: "Download Code"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/intermediate.ipynb"
        icon: "journal"
---
Difficulty level: <span style="color:#2B7492">{{< bi star-fill >}} {{< bi star-fill >}} </span>

Often we need with user input, files, system and paths. In this chapter we will cover these topics.

# I/O (Input/Output) {.unnumbered}


You can use the `print()` function to **print a message** to the screen. <br>
You can use the `input()` function to get **input from the user**. <br>
You can use the `open()` function to **open a file**. <br>
You can use the `write()` function to **write to a file**. <br>
You can use the `read()` function to **read from a file**. <br>
You can use the `close()` function to **close a file**. <br>
You can use the `with` statement to **open a file** and **automatically close** it when you are done. <br>
You can use the `os` module to **work with files and directories**. <br>
You can use the `sys` module to **work with command line arguments**. <br>
You can use the `argparse` module to work also with **command line arguments**. <br>

 This should print "Hello World!" to the console
```{python}
print("Hello World!")
```

This should ask the user to enter a number and print it to the console
```{python}
#| eval: false
print(input("Enter a number: "))
```

This should write "Hello World!" to the file "file.txt"
```{python}
open("file.txt", "w").write("Hello World!") 
```

This should read the file "file.txt" and print the content to the console
```{python}
print(open("file.txt").read()) 

```

This should print "Hello World!" to the console without a newline

```{python}
print("Hello World without newline.", end="") 
print("Next print statement.")
```

This should read the file "file.txt" and print the content to the console

```{python}
with open("file.txt", "r") as file: print(file.read()) 
```

Write a file with the content "Hello World!" and close it

```{python}
file = open("file.txt", "w")
file.write("Hello World!")
file.close()
```

---

# System {.unnumbered}


There are a lot of modules in Python to work with the system. <br>
You can use the `os` module to **work with files and directories**. <br>
You can use the `sys` module to **work with command line arguments**. <br>
You can use the `argparse` module to work also with **command line arguments**. <br>

Most important functions are: <br>
- `os.getcwd()` to get the current working directory. <br>
- `os.chdir()` to change the current working directory. <br>
- `os.listdir()` to list the files in a directory. <br>
- `os.mkdir()` to create a directory. <br>
- `os.rmdir()` to remove a directory. <br>
- `os.remove()` to remove a file. <br>
- `os.rename()` to rename a file. <br>
- `os.path.exists()` to check if a file or directory exists. <br>
- `os.path.isfile()` to check if a file exists. <br>
- `os.path.isdir()` to check if a directory exists. <br>
- `os.path.join()` to join two paths. <br>
- `os.path.basename()` to get the base name of a path. <br>
- `os.path.dirname()` to get the directory name of a path. <br>
- `os.path.abspath()` to get the absolute path of a path. <br>
- `os.path.split()` to split a path into a directory and a file. <br>
- `os.path.splitext()` to split a path into a base name and an extension. <br>
- `os.path.getsize()` to get the size of a file. <br>
- `os.path.getmtime()` to get the modification time of a file. <br>

- `sys.argv` to get the command line arguments. <br>
- `sys.exit()` to exit the program. <br>
- `sys.stdin` to read from the standard input. <br>
- `sys.stdout` to write to the standard output. <br>
- `sys.stderr` to write to the standard error. <br>

- `argparse.ArgumentParser()` to create a parser. <br>
- `add_argument()` to add an argument to the parser. <br>
- `parse_args()` to parse the command line arguments. <br>


This should remove the file "file.txt"
```{python}
import os
os.remove("file.txt")
```


For `sys` you can use the `sys.argv` to get the command line arguments. <br>
`sys.argv` is a list of the command line arguments. <br>
`sys.argv[0]` is the name of the script. <br>
`sys.argv[1]` is the first argument. <br>



```{python}
import sys
first_argument = sys.argv[1]
```




For more information about the sys module you can visit the [official documentation](https://docs.python.org/3/library/sys.html).


For `Argparse` you can use the following code:
For python scripts:
You can use argparse to parse command line arguments.

```{python}
#| eval: false
from argparse import ArgumentParser

parser = ArgumentParser(description="This is a description.")
parser.add_argument("--arg1", help="This is the first argument.")
parser.add_argument("---arg2", help="This is the second argument.")
args = parser.parse_args()
```

For more information about `Argparse` you can visit the [official documentation](https://docs.python.org/3/library/argparse.html).

---

# Paths {.unnumbered}

Pay attention to the paths in your code. They are different defined in Windows and Linux. In Windows and macOS, you use backslashes `/` and in Linux, you use forward slashes `\`. 

To avoid this problem you can use the `os` or `pathlib` module to make your code platform independent.


```{python}
import os

path = os.path.join('folder1', 'folder2', 'folder3', 'data.dat')
print(path)
```


```{python}
working_dir = os.getcwd()
print(working_dir)
```


```{python}
from pathlib import Path

path = Path('folder1') / 'folder2' / 'folder3' / 'data.dat'
print(path)
```


```{python}
working_dir = Path.cwd()
print(working_dir)
```



# Lists {.unnumbered}


Lists collect multiple items in a single variable. <br>

You can use the `[]` operator to create a list. <br>
You can use the `append()` method to add an item to a list. <br>
You can use the `insert()` method to add an item at a specific position. <br>
You can use the `del` statement to delete an item from a list. <br>
You can use the `remove()` method to remove an item from a list. <br>
You can use the `pop()` method to remove an item at a specific position. <br>
You can use the `clear()` method to remove all items from a list. <br>
You can use the `copy()` method to copy a list. <br>
You can use the `count()` method to count the number of items in a list. <br>
You can use the `sort()` method to sort a list. <br>
You can use the `reverse()` method to reverse a list. <br>
You can use the `extend()` method to add items from another list. <br>
You can use the `index()` method to get the index of an item. <br>
You can use the `len()` function to get the length of a list. <br>
You can use the `list()` function to create a list. <br>





```{python}

a = ['a', 'b', 'c']
b = [1,3,'a', 1j]
len(a) #length of list

```

:::{.callout-warning}
Index is starting with **0** in Python.
:::

```{python}

l = ['first', 'second', 'third']
l[0]

```


Last element is reached by index -1.


```{python}
l[-1]

```

---


# Control Structures {.unnumbered}

Control structures are used to control the flow of a program. <br>
The most common control structures are:

- You can use the `if` statement to execute a block of code if a condition is true. 
- You can use the `elif` statement to execute a block of code if the first condition is - false and the second condition is true.
- You can use the `else` statement to execute a block of code if the condition is false.
- You can use the `for` loop to iterate over a sequence. 
- You can use the `while` loop to execute a block of code as long as a condition is true. 
- You can use the `break` statement to exit a loop. 
- You can use the `continue` statement to skip the rest of the code in a loop. 
- You can use the `pass` statement to do nothing.

## if statement {.unnumbered}

```{python}
x = 0
if x < 0:
    print("x < 0")
elif x > 0:
    print("x > 0")
else:
    print("x = 0")
```

## break,continue,pass {.unnumbered}


```{python}

for i in range(10):
    if i == 5:
        break
    print(i)
```


```{python}
for i in range(10):
    if i == 5:
        continue
    print(i)
```   



```{python} 
for i in range(10):
    if i == 5:
        pass
    print(i)
```

## For Loops {.unnumbered}

```{python} 
for i in range(5): #from 0 to 4 
    print(i)
```

```{python} 
for i in range(1,10,2): # start 1, stop 10 excluded, step 2
    print(i)
```

```{python} 
l = list(range(0,10))
```

```{python} 
l
```

```{python} 
for i in l:  # using list
    print(i)
```

## While Loops {.unnumbered}

```{python} 
x = 0
while x  < 4:
    print(l[x])
    x = x + 1
```

```{python} 
print("while loop with continue and break statement")
n = 0
while(n < 10):
    n+=1
    if n == 5:
        continue
    if n == 7:
        print("The loop reached 7 and will break now.")
        break
    print(n)
```

## Functions {.unnumbered}


Functions are defined using the `def` keyword. <br>
You can use the `return` keyword to return a value from a function. <br>
The parameters of a function are defined in the parentheses. <br>
Multiple parameters are separated by commas. <br>
You can use default values for the parameter *e.g.* `b=5`. <br>
Multiple return values are separated by commas. <br>
They are stored in a tuple. <br>


```{python} 
def summation(a,b=5):
    return a+b, a-b
```

```{python} 
summation(4,2)
```

```{python} 
sum, sub = summation(4)
print(sum)
print(sub)
```

```{python} 
x = 3

def multiple_return_value(x,a,b):
    n = x+a
    m = x-b
    return [n,m]
print(multiple_return_value(x,5,10)[0],multiple_return_value(x,5,10)[1])
```

---

## Style guideline for writing python code {.unnumbered}


For writing a readable code, it is important to follow a style guideline. <br>
The most common style guideline for Python is [PEP 8](https://www.python.org/dev/peps/pep-0008/). <br>

---

# Exercises {.unnumbered}
Download it locally and try to solve the exercises. <br>

[Basic Python](https://github.com/stkroe/PythonforChemists/blob/main/course/examples/notebooks/ex1.zip)



Or open it in `Google Colab`:

[Basic Python](https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/notebooks/ex1/material/student/BasicExercises.ipynb)


