---
title: "Basic Data Visualization Techniques"
execute: 
  echo: True
  eval: True
  error: True
other-links: 
      - text: "Example"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/examples/SimplePlotExmple.ipynb"
        icon: journal
      - text: "Open Example in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/SimplePlotExample.ipynb"
        icon: "laptop"
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/SimplePlots.ipynb"
        icon: "laptop"
      - text: "Download Code"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/SimplePlots.ipynb"
        icon: "journal"
---
Difficulty level: <span style="color:#2B7r492">{{< bi star-fill >}} </span>

## Basic Data Visualization Technique {.unnumbered}


The most popular data visualization libraries in Python is Matplotlib.
Let`s start with the basic data visualization techniques using Matplotlib.


### 1. Generate some x-y data points. {.unnumbered}

```{python}
from matplotlib import pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)
y = np.sin(x)
```

---

### 2. Plot the data points. {.unnumbered}

```{python}
#| fig-width: 1
#| fig-height: 1
#| fig-dpi: 72
plt.plot(x, y)
plt.show()
```

To add more graphs to the same figure, use `plt.plot()` multiple times before `plt.show()`.
If you want to create a new figure, use `plt.figure()` before `plt.plot()`.

```{python}
#| fig-width: 1
#| fig-height: 1
#| fig-dpi: 72
plt.plot(x,y)
plt.plot(x,2*y)
plt.show()
plt.plot(x, y)
plt.show()
```

---

### 3. Adjust the plot. {.unnumbered}


The `plot()` function takes the following arguments:

- x-axis data points
- y-axis data points
- [color](https://matplotlib.org/stable/users/explain/colors/colors.html): hex, or color name (e.g., 'red', 'blue','black'), abbreviated (e.g., 'r', 'b','k')
- [linestyle](https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html): '-', '--', '-.', ':' or "solid", "dashed", "dashdot", "dotted"
- [marker](https://matplotlib.org/stable/api/markers_api.html): 'o', 'x', '+', '*', 's', 'd', '^', 'v', '>', '<', 'p', 'h'
- linewidth - width of the line
- alpha - transparency of the line
- markerfacecolor - color of the marker face
- markersize - size of the marker
- label - label for the data points



You have to call `plt.legend()` to show the labels.

```{python}
#| fig-width: 1
#| fig-height: 1
#| fig-dpi: 72
plt.figure()
plt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', 
            markerfacecolor='blue', markersize=5,
            label='sin(x)')
plt.plot(x, 2*y, color='darkgrey', linestyle='dotted', linewidth=2, marker='x',
            markerfacecolor='grey', markersize=5,
            label='2*sin(x)')
plt.legend()
plt.show()
```

---

### 4. Adust the figure {.unnumbered}


This plot figure can be adjusted by changing the figure size, title, labels, and so on.
 
- `plt.xlabel()`: Set the x-axis label of the current axis.
- `plt.ylabel()`: Set the y-axis label of the current axis.
- `plt.title()`: Set a title for the axes.
- `plt.legend()`: Place a legend on the axes.
- `plt.grid()`: Configure the grid lines.
- `plt.xlim()`: Get or set the x-limits of the current axes.
- `plt.ylim()`: Get or set the y-limits of the current axes.
- `plt.xticks()`: Get or set the current tick locations and labels of the x-axis.
- `plt.yticks()`: Get or set the current tick locations and labels of the y-axis.
- `plt.figure()`: Create a new figure.
- `plt.show()`: Display a figure.

```{python}
#| fig-width: 5
#| fig-height: 4
#| fig-dpi: 72
plt.figure(figsize=(4, 4), dpi=100)
# Create a figure with a specific size and resolution
plt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', 
            markerfacecolor='blue', markersize=5,
            label='sin(x)')
plt.plot(x, 2*y, color='darkgrey', linestyle='dotted', linewidth=2, marker='x',
            markerfacecolor='grey', markersize=5,
            label='2*sin(x)')
plt.xlim([0, 10]) # set the x-axis limits
plt.ylim([-3, 3]) # set the y-axis limits
plt.xticks(np.arange(0, 11, 2)) # set the x-axis ticks
plt.yticks(np.arange(-3, 4, 1)) # set the y-axis ticks
plt.xlabel('x') # set the x-axis label
plt.ylabel('y') # set the y-axis label
plt.title('Sine and Double Sine Functions') # set the title of the plot
plt.grid(linewidth=0.1)# set the grid linewidth
plt.legend(loc='upper left') # set the location of the legend: upper left, upper right, lower left, lower right
plt.show()
```

---


## Creating multiple plots {.unnumbered}

You can create multiple plots in the same figure by using the `subplot()` function.



```{python}
#| fig-width: 1
#| fig-height: 1
#| fig-dpi: 72
plt.subplot(2, 1, 1)
plt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', 
            markerfacecolor='blue', markersize=5,
            label='sin(x)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Sine Function')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(x, 2*y, color='darkgrey', linestyle='dotted', linewidth=2, marker='x',
            markerfacecolor='grey', markersize=5,
            label='2*sin(x)')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Double Sine Function')
plt.legend()   
plt.tight_layout()
plt.show()
```

```{python}
fig = plt.figure(figsize=(4,2),dpi=72,layout='constrained', facecolor='lightyellow')
# Create a figure with a specific layout and background color
# constrained layout automatically adjusts the subplots to fit the figure
fig.suptitle('Figure') # set the title of the figure object
subL, subR = fig.subfigures(1, 2) # create two subfigures
subL.set_facecolor('thistle') # set the background color of the left subfigure
sub_subL = subL.subplots(2, 1, sharex=True) # create two subplots in the left subfigure
sub_subL[1].set_xlabel('x [m]')
subL.suptitle('Left subfigure') # set the title of the left subfigure
subR.set_facecolor('lightskyblue') # set the background color of the right subfigure
sub_subR = subR.subplots(1, 2, sharey=True) 
sub_subR[0].set_title('Axes 1') # set the title of the first subplot in the right subfigure
sub_subR[1].set_title('Axes 2') # set the title of the second subplot in the right subfigure
subR.suptitle('Right subfigure')
```


### Subfigures and Gridspec

You can also create `subplots` and `gridspecs` to create more complex layouts.

```{python}
from matplotlib.gridspec import GridSpec
from matplotlib import pyplot as plt
import numpy as np

```

```{python}
x = np.linspace(0, 10, 100)
y = np.sin(x)

fig, ax = plt.subplots(3,2, figsize=(3,4), dpi=96, sharex=True, sharey=True, constrained_layout=True,gridspec_kw={'hspace': 0.2, 'wspace': 0.2})

for i in range(3):
    for j in range(2):
        ax[i,j].plot(x, y*(i+1)*(j+1))

plt.show()

```

```{python}
x = np.linspace(0, 10, 100)
y = np.sin(x)

fig = plt.figure(figsize=(4, 6), dpi=100)
gs = GridSpec(3, 2, figure=fig, hspace=0.4, wspace=0.3)

for i in range(3):
    for j in range(2):
        ax = fig.add_subplot(gs[i, j])
        ax.plot(x, y*(i+1)*(j+1))
        ax.set_title(f'Plot {i+1}, {j+1}')

plt.show()

```

### Exercises {.unnumbered}
Download it locally and try to solve the exercises. <br>

[Simple Plot Example](https://github.com/stkroe/PythonforChemists/blob/main/course/examples/SimplePlotExmple.ipynb)



Or open it in `Google Colab`:

[Simple Plot Example](https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/SimplePlotExample.ipynb)



