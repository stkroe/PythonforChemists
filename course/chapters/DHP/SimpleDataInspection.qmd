---
title: "Simple Data Inspection"
execute: 
  echo: True
  eval: True
  error: True
other-links: 
      - text: "Data tempearture_data"
        href: "https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures.csv"
        icon: "filetype-csv"
      - text: "Data temperature_nan_data"
        href: "https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures_nan.csv"
        icon: "filetype-csv"
      - text: "Data temperature_dat"
        href: "https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures.dat"
        icon: "filetype-txt"
      - text: "Data temperature_nan_dat"
        href: "https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures_nan.dat"
        icon: "filetype-txt"
      - text: "Download Code"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/SimpleDataInspection.ipynb"
        icon: "journal"
      - text: "Example"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/examples/DHP_Example.ipynb"
        icon: journal
      - text: "Open Example in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/DHP_Example.ipynb"
        icon: "laptop"
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/SimpleDataInspection.ipynb"
        icon: "laptop"
--- 


## Inspection of Data {.unnumbered}

After you load your data you have to inspect it to:

- check if no data is consistent, no missing values
- check if the data is in the correct format
- check if the data is in the correct range
- check if the data is in the correct distribution
- get first insights into the data

```{python}
#| echo: false
#| eval: true
temperature_data = "https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures.csv"
temperature_nan_data ="https://raw.githubusercontent.com/stkroe/PythonForChemists/main/course/data/lectures/temperatures_nan.dat"
```

### Numpy {.unnumbered}

#### Overview of the Data {.unnumbered}

```{python}
import numpy as np
data = np.loadtxt(temperature_data, delimiter=';', skiprows=1)
```

First of all you can use the `print()` function to get a quick overview of the data.

```{python}
print(data)
```

In numpy you can use the `shape` attribute to get the shape of the data.
```{python}
print(data.shape)
```

The data has 44640 rows and 2 columns.

#### Data Type Conversion{.unnumbered}
You can use the `dtype` attribute to get the data type of the data.
```{python}
print(data.dtype)
```

The data type is `float64`.

You can transform the data to a `float64` data type if it is not already in this format.
```{python}
data = data.astype('float64')
```

#### Missing Data and Corrupted Data {.unnumbered}
You can use the `isnan()` function to check if there are missing values in the data.

```{python}
print(np.isnan(data).sum())
```


### Pandas {.unnumbered}


#### Overview of the Data {.unnumbered}


You can use the `head()` function to get a quick overview of the first rows of the data.


```{python}
import pandas as pd

data = pd.read_csv(temperature_data,sep=';')
data.head()
```

The `describe()` function gives you a quick overview of the data distribution.

```{python}
data.describe()
```




The `describe`function shows you the count, mean, standard deviation, minimum, 25%, 50%, 75% and maximum values of the data.

In this case, data has 44640 data points, The mean of the temperature is 298(6) K. The minimum temperature is 279 K and the maximum temperature is 316 K. Further the 25% quantile is 294 K, the 50% quantile is 298 K and the 75% quantile is 302 K. The measurement was taken from 1 to 44640 seconds which is 12 hours and 24 minutes.
We suppose that is the correct time range which was to be expected.
 
This gives you a quick overview of the data distribution.


#### Missing Data and Corrupted Data {.unnumbered}


To check if there is missing data in the data set you can use the `isna()` function.

```{python}
data.isna().sum()
```



No missing data is found in this case.


You can check the data type using `dtypes` function to check if the data is in the correct format.

```{python}
data.dtypes
```

```{python}
data.dtypes
```

You see that `time` is an `int64` and `temperature` is a `float64`.
For the analysis, you might want to convert the `time` to a `float64` as well.

```{python}
data['time'] = data['time'].astype('float64')
```

```{python}
data['time'] = data['time'].astype('float64')
data.dtypes
```

If we have missing data we can use the `fillna()` function to fill the missing data with a specific value.

```{python}
data.fillna(0)
```

```{python}
data_missing = pd.read_csv(temperature_nan_data, header=None, skipinitialspace=True, sep=' ', names=['time', 'temperature'])
data_missing.head()
```




One value is missing in the `temperature` column. We fill it with 0.

First let check where the data is missing.

```{python}
data[data['temperature'].isna()]
```

At index 21 at time 22 s the temperature is missing.

:::{.callout-note}
The handling of missing data is a complex topic.
First of all you have to check why the data is missing. Is it a measurement error, a data processing error etc.

You have to decide if you want to fill the missing data with a specific value, drop the row or column or interpolate the missing data. The decision depends on the data and the analysis you want to perform. Droping Data is always a delicate decision because you loose information. Sometimes it is not good scientific practice to drop data. 
For more information there a lot of research in this topic [https://doi.org/10.1076/edre.7.4.353.8937](https://doi.org/10.1076/edre.7.4.353.8937)
:::


The time step can be estimated by the difference between the time steps of the previous and the next data point.

```{python}
data['time'].diff()
```
And we can summarize it via:

```{python}
data['time'].diff().value_counts()
```

```{python}
data_missing['time'].diff().value_counts()
```

get difference between temperature values
```{python}
data_missing[10:30].diff()
```


The time step is constantly 1 second. 
The difference between the temperature of the previous and the next data point is at $~10^{-2}$ order.
We can assume that in this case the data is consistent enough and we can fill the missing data with the mean of the previous and the next data point.
 
```{python}
data['temperature'].fillna((data['temperature'].shift() + data['temperature'].shift(-1))/2, inplace=True)
```


```{python}
data_missing['temperature'].fillna((data_missing['temperature'].shift() + data_missing['temperature'].shift(-1))/2, inplace=True)
data_missing[20:25]
```

Now can analysis or plot the data.

#### Data Type Conversion {.unnumbered}

You get the data type of the data with the `dtypes` function.

```{python}
data.dtypes
```

You can convert the data type with the `astype()` function.

```{python}
data['time'] = data['time'].astype('float64')
```



## Example: Data Import and Inspection {.unnumbered}

# Exercises {.unnumbered}
Download it locally and try to solve the exercises. <br>

[Data Import and Inspection Example](https://github.com/stkroe/PythonforChemists/blob/main/course/examples/DHP_Example.ipynb)


Or open it in `Google Colab`:

[Data Import and Inspection Example](https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/examples/DHP_Example.ipynb)




