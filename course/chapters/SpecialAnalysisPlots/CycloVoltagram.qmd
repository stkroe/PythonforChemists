---
title: "Cycle Voltammetry Data Analysis"
execute: 
  echo: True
  eval: True
code-links:
      - text: "Open in Colab"
        href: "https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/notebooks/CycloVoltagram.ipynb"
        icon: "laptop"
      - text: "Download Code"
        href: "https://github.com/stkroe/PythonforChemists/blob/main/course/notebooks/CycloVoltagram.ipynb"
        icon: "journal"
--- 

Difficulty level: <span style="color:#2B7492">{{< bi star-fill >}} {{< bi star-fill >}} </span>

##   Cycle Voltammetry Data Analysis {.unnumbered}

Cycle voltammetry is a powerful technique to study the electrochemical behavior of a system. The cyclic voltammogram is a plot of the current versus the applied potential. The shape of the cyclic voltammogram can provide information about the redox behavior of the system. In this notebook, we will analyze a cyclic voltammogram using Python.


```{python}
import numpy as np
import matplotlib.pyplot as plt

# Parameters
E_start = -0.5      # Starting voltage (V)
E_reverse = 0.5     # Reverse voltage (V)
scan_rate = 0.1     # V/s
points = 1000       # Number of data points
peak_current = 1    # Arbitrary current units

# Time and potential sweep
t = np.linspace(0, 2 * abs(E_reverse - E_start) / scan_rate, points)
E = np.piecewise(t,
                 [t < points/2, t >= points/2],
                 [lambda t: E_start + scan_rate * t,
                  lambda t: E_reverse - scan_rate * (t - t[points//2])])

# Simulated current response using a Gaussian peak at the switching points
def current_response(E):
    return peak_current * (np.exp(-((E - 0.2)**2) / 0.01) - np.exp(-((E + 0.2)**2) / 0.01))

I = current_response(E)

# Plotting
plt.figure(figsize=(6, 5))
plt.plot(E, I, color='blue')
plt.xlabel('Potential (V)')
plt.ylabel('Current (a.u.)')
plt.title('Simulated Cyclic Voltammogram')
plt.grid(True)
plt.tight_layout()
plt.show()

```