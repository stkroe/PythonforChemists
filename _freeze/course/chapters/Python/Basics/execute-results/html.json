{
  "hash": "0ac2f9f414fd58d6aad49e6f96f4a41e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Start\"\nformat: live-html\nengine: jupyter\npyodide:\n  packages:\n    - matplotlib\n    - numpy\n    - seaborn\n    - os \n    - argparse\n    - sys\ncode-links:\n      - text: \"Open in Colab\"\n        href: \"https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/chapters/Python/Basics.ipynb\"\n        icon: \"laptop\"\n---\n\n\n\n\n\n\nThis will be a very fast and basic start into coding with Python. \n\n\n# Elemental Syntax{.unnumbered}\n## Comands{.unnumbered}\n\nEach line of code is a command. The computer reads the code from top to bottom and executes each command in order.\n\n:::{.callout-note}\n# Example - Hello World {.unnumbered}\n`print` is a command that tells the computer to display the text that follows it. \n:::\n\nTry it out:\n\n\n\n\n\n```{pyodide}\nprint(\"Hello World\")\n```\n\n\n\n\n\n If you want to span a command over multiple lines you can use `\\` or <br> \n if you are using parenthesis in your command you can directly use a new line.\n\n\n```python\n result = 1 + 2 + 3 + \\\n          7 + 8 + 9\n numbers = [\n     1, 2, 3,\n     4, 5, 6,\n     7, 8, 9\n ]\n ```\n\n \n\n ## Indentation {.unnumbered}\n In Python code blocks are not structured by brackets or semicolons like C/C++ or Java but by indentation. This means that the code inside a loop or a function is indented by a tab or four spaces.\n\n:::{.callout-warning}\nIndentations are curcial in Python. \nIf you don't indent your code correctly, you will get an typical beginner error.\n\nPay attention to not mix tabs and spaces in your code.\n:::\n\n\n\n\n\n:::{.callout-note}\nExample - Wrong Indentation {.unnumbered}\n:::\n\nTry it out:\n\n\n\n\n\n```{pyodide}\nprint(\"correct indentation\")\n    print(\"wrong indentation\")\n```\n\n\n\n\n\nAll the lines in the block must have the same indentation:\n\n\n\n\n\n```{pyodide}\n    print(\"correct indentation\") \n    print(\"correct indentation\")\n    print(\"correct indentation\")\n```\n\n\n\n\n\n## Error messages {.unnumbered}\n\nWhen you run a command that has an error, Python will print an error message. \n\nThe so called stack trace. It is a list of error messages that Python prints when an error occurs.\n\nIt gives you information about the error and the location of the error in your code.\n\nThe strack track is read from bottom to top.\n\nThe last line contains the error message and the line number where the error occured.\n\n\n\n::: {.callout-tip}\nOften the error messages are not very clear. You can search for the error message in the internet. [Stackoverflow](https://stackoverflow.com/) has a lot of answers to common errors. Or you can ask some AI *e.g.* [ChatGPT](https://chat.openai.com/).\n:::\n\n\n:::{.callout-note}\nExample - Cryptic Error Message {.unnumbered}\nWhat does the error message tell you?\n:::\n\n\n\n\n\n```{pyodide}\na = [1,2,3]\nprint(a[3])\n```\n\n\n\n\n\n\n\n\n\n\n:::{.callout-tip collapse=\"true\"}\nSolution {.unnumbered}\nThe error message tells you that you are trying to access an index that is out of range.\n:::\n\n\n## Comments {.unnumbered}\nComments are important. They help you and others to understand your code. <br>\nYou can use the \\` symbol to write comments.\n\nDocstrings are used to document the code for example with [pydoc](https://docs.python.org/3/library/pydoc.html). They are written using triple quotes \\`\"\"\" \"\"\"\"\\` \n\n\n\n\n\n\n\n```{pyodide}\n# This is a comment\n\n\"\"\"\nThis is a documentation.\nYou can document your code for example by pydoc\n\"\"\"\n```\n\n\n\n\n\n\n# Modules {.unnumbered}\nThere exist a lot of libraries and modules in Python. <br>\nLibraries is a term to describe a collection of modules. <br>\nPackages are a way to collect related modules together within a single tree-like hierarchy. <br>\nModules are a collection of files. <br>\nA script is a file that can be run independently. <br>\nYou can use the `import` statement to import the whole module. <br>\nYou can use the `from` statement to import a specific part of the module. <br>\nYou can use the `dir()` function to list the names in a module. <br>\nYou can use the `help()` function to get help on a module. <br>\n\n\n\n\n\n\n\n\n\n```{pyodide}\nimport numpy as np  # the library numpy is imported\nfrom matplotlib import pyplot as plt # the library pyplot is imported from matplotlib module\n```\n\n\n\n\n\n\n# I/O (Input/Output) {.unnumbered}\n\n\nYou can use the `print()` function to **print a message** to the screen. <br>\nYou can use the `input()` function to get **input from the user**. <br>\nYou can use the `open()` function to **open a file**. <br>\nYou can use the `write()` function to **write to a file**. <br>\nYou can use the `read()` function to **read from a file**. <br>\nYou can use the `close()` function to **close a file**. <br>\nYou can use the `with` statement to **open a file** and **automatically close** it when you are done. <br>\nYou can use the `os` module to **work with files and directories**. <br>\nYou can use the `sys` module to **work with command line arguments**. <br>\nYou can use the `argparse` module to work also with **command line arguments**. <br>\n\n This should print \"Hello World!\" to the console\n\n\n\n\n```{pyodide}\nprint(\"Hello World!\")\n\n```\n\n\n\n\n\nThis should ask the user to enter a number and print it to the console\n\n\n\n\n```{pyodide}\nprint(input(\"Enter a number: \"))\n\n```\n\n\n\n\n\nThis should write \"Hello World!\" to the file \"file.txt\"\n\n\n\n\n```{pyodide}\nopen(\"file.txt\", \"w\").write(\"Hello World!\") \n\n```\n\n\n\n\n\nThis should read the file \"file.txt\" and print the content to the console\n\n\n\n\n```{pyodide}\nprint(open(\"file.txt\").read()) \n\n```\n\n\n\n\n\nThis should print \"Hello World!\" to the console without a newline\n\n\n\n\n```{pyodide}\n\nprint(\"Hello World without newline.\", end=\"\") \nprint(\"Next print statement.\")\n\n```\n\n\n\n\n\nThis should read the file \"file.txt\" and print the content to the console\n\n\n\n\n```{pyodide}\n\nwith open(\"file.txt\", \"r\") as file: print(file.read()) \n```\n\n\n\n\n\n\n# System {.unnumbered}\n\n\nThere are a lot of modules in Python to work with the system. <br>\nYou can use the `os` module to **work with files and directories**. <br>\nYou can use the `sys` module to **work with command line arguments**. <br>\nYou can use the `argparse` module to work also with **command line arguments**. <br>\n\nMost important functions are: <br>\n- `os.getcwd()` to get the current working directory. <br>\n- `os.chdir()` to change the current working directory. <br>\n- `os.listdir()` to list the files in a directory. <br>\n- `os.mkdir()` to create a directory. <br>\n- `os.rmdir()` to remove a directory. <br>\n- `os.remove()` to remove a file. <br>\n- `os.rename()` to rename a file. <br>\n- `os.path.exists()` to check if a file or directory exists. <br>\n- `os.path.isfile()` to check if a file exists. <br>\n- `os.path.isdir()` to check if a directory exists. <br>\n- `os.path.join()` to join two paths. <br>\n- `os.path.basename()` to get the base name of a path. <br>\n- `os.path.dirname()` to get the directory name of a path. <br>\n- `os.path.abspath()` to get the absolute path of a path. <br>\n- `os.path.split()` to split a path into a directory and a file. <br>\n- `os.path.splitext()` to split a path into a base name and an extension. <br>\n- `os.path.getsize()` to get the size of a file. <br>\n- `os.path.getmtime()` to get the modification time of a file. <br>\n\n- `sys.argv` to get the command line arguments. <br>\n- `sys.exit()` to exit the program. <br>\n- `sys.stdin` to read from the standard input. <br>\n- `sys.stdout` to write to the standard output. <br>\n- `sys.stderr` to write to the standard error. <br>\n\n- `argparse.ArgumentParser()` to create a parser. <br>\n- `add_argument()` to add an argument to the parser. <br>\n- `parse_args()` to parse the command line arguments. <br>\n\n\nThis should remove the file \"file.txt\"\n\n\n\n\n```{pyodide}\nimport os\nos.remove(\"file.txt\")\n```\n\n\n\n\n\n\nFor `sys` you can use the `sys.argv` to get the command line arguments. <br>\n`sys.argv` is a list of the command line arguments. <br>\n`sys.argv[0]` is the name of the script. <br>\n`sys.argv[1]` is the first argument. <br>\n\n\n\n\n\n```{markdown}\n\n```python\nimport sys\nfirst_argument = sys.argv[1]\n```\n\n\n\n\n\n```\n\n\nFor more information about the sys module you can visit the [official documentation](https://docs.python.org/3/library/sys.html).\n\n\nFor `Argparse` you can use the following code:\n\n```{pyodide}\nfrom argparse import ArgumentParser\nFor python scripts:\nYou can use argparse to parse command line arguments\nparser = ArgumentParser(description=\"This is a description.\")\nparser.add_argument(\"--arg1\", help=\"This is the first argument.\")\nparser.add_argument(\"---arg2\", help=\"This is the second argument.\")\nargs = parser.parse_args()\n```\nFor more information about `Argparse` you can visit the [official documentation](https://docs.python.org/3/library/argparse.html).\n\n\n# Paths {.unnumbered}\n\nPay attention to the paths in your code. They\nare different defined in Windows and Linux. In Windows and macOS, you use backslashes `/` and in Linux, you use forward slashes `\\`. \n\nTo avoid this problem you can use the `os` or `pathlib` module to make your code platform independent.\n\n\n\n\n\n\n```{pyodide}\nimport os\n\npath = os.path.join('folder1', 'folder2', 'folder3', 'data.dat')\nprint(path)\n```\n\n```{pyodide}   \nworking_dir = os.getcwd()\nprint(working_dir)\n```\n\n```{pyodide}\nfrom pathlib import Path\n\npath = Path('folder1') / 'folder2' / 'folder3' / 'data.dat'\nprint(path)\n```\n\n```{pyodide}\nworking_dir = Path.cwd()\nprint(working_dir)\n```\n\n\n\n\n\n\n# Variables {.unnumbered}\n\n\nIn Python, you don't need to declare the type of a variable. <br>\nYou can assign a value to a variable using the `=` operator. <br>\n\n\n\n\n\n\n```{pyodide}\na = 1 a is a variable\nb = \"String\" b is a string\nprint(1, \" is an\", type(a))\nprint(b, \" is a\", type(b))\n\n```\n\n\n\n\n\n# Data Types {.unnumbered}\n\n\nPython has several data types. The most common are:\n- `int` for integers\n- `float` for floating point numbers\n- `str` for strings\n- `bool` for booleans\n- `list` for lists\n- `tuple` for tuples\n- `dict` for dictionaries\n- `set` for sets\n\nYou can use the `type()` function to get the type of a variable. <br>\nYou can use the `isinstance()` function to check if a variable is an instance of a class. <br>\nType casting is the process of converting one data type to another. <br>\nYou can use the `int()`, `float()`, `str()`, `bool()`, `list()`, `tuple()`, `dict()`, `set()` functions to cast a variable to a different type. <br>\n\n\n\n\n\n\n```{pyodide}\nx = 5 int\nprint(x,type(x))# print the type of x\n\n```\n\n```{pyodide}\ny = 5.12 float\nprint(y,type(y))\n\n```\n\n```{pyodide}\nc = 2.8j complex\nprint(c,type(c))\n\n```\n\n```{pyodide}\ns = \"Hello World\" #string\nprint(s,type(s))\n\n```\n\n```{pyodide}\n\nprint(\"length of word: \", len(s)) # length of string\nprint(\"character on position 2: \", s[2]) \nprint(\"last 3 characters: \", s[-3:])\ns2 = s + \"!\"\nprint(s2)\ns3 = \"\\\"Hello world\\\"!\"\nprint(s3)\n\n```\n\n```{pyodide}\nd = dict(name=\"Max\",lastname=\"Musterman\",height=1.89) # dictionary\nprint(d,type(d))\n\n```\n\n```{pyodide}\nb = True # boolean\nprint(b,type(b))\n\n```\n\n```{pyodide}\ndataset = {1,12,3} # set \nprint(dataset,type(dataset))\n\n```\n\n```{pyodide}\ndataset2 = set((1.2,2,2)) # set\nprint(dataset2,type(dataset2))\n\n```\n\n```{pyodide}\nr = range(0,10,2) # range\nprint(r,type(r))\n\n```\n\n```{pyodide}\nl = [1,2,2,3] # list\nprint(l,type(l))\nprint(\"length of list\",len(l))\n\n```\n\n```{pyodide}\nt = (1,2)# tuple\nprint(t,type(t))\n```\n\n```{pyodide}\n#type conversion\nf = float(x)\nprint(f,type(f))\n\n```\n\n\n\n\n\n# Lists {.unnumbered}\n\n\n\nLists collect multiple items in a single variable. <br>\nYou can use the `[]` operator to create a list. <br>\nYou can use the `append()` method to add an item to a list. <br>\nYou can use the `insert()` method to add an item at a specific position. <br>\nYou can use the `del` statement to delete an item from a list. <br>\nYou can use the `remove()` method to remove an item from a list. <br>\nYou can use the `pop()` method to remove an item at a specific position. <br>\nYou can use the `clear()` method to remove all items from a list. <br>\nYou can use the `copy()` method to copy a list. <br>\nYou can use the `count()` method to count the number of items in a list. <br>\nYou can use the `sort()` method to sort a list. <br>\nYou can use the `reverse()` method to reverse a list. <br>\nYou can use the `extend()` method to add items from another list. <br>\nYou can use the `index()` method to get the index of an item. <br>\nYou can use the `len()` function to get the length of a list. <br>\nYou can use the `list()` function to create a list. <br>\n\n\n\n\n\n\n\n\n\n```{pyodide}\n\na = ['a', 'b', 'c']\nb = [1,3,'a', 1j]\nlen(a) #length of list\n\n```\n\n\n\n\n\n:::{.callout-warning}\nIndex is starting with **0** in Python.\n:::\n\n\n\n\n\n```{pyodide}\n\nl = ['first', 'second', 'third']\nl[0]\n\n```\n\n\n\n\n\n\nLast element is reached by index -1.\n\n\n\n\n\n\n```{pyodide}\nl[-1]\n\n```\n\n\n\n\n\n\n\n# Mutable and Immutable Objects {.unnumbered}\n\nImmutable objects cannot be changed. <br>\nMutable objects can be changed. <br>\nImmutable objects are: `int`, `float`, `bool`, `str`, `tuple`, `frozenset`. <br>\nMutable objects are: `list`, `dict`, `set`. <br>\n\nThat means if you change an immutable object, a new object is created. <br>\nIf you change a mutable object, the object is changed. <br>\n\n\n\n\n\n```{pyodide}\na = 1\nb = a\n\nprint(\"a:\",a)\nprint(\"b:\",b)\n\na = 2\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n\nb = 3\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n\nb = a\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n```\n\n```{pyodide}\nmutable objects\na = [1,2,3]\nb = a\n\nprint(\"a:\",a)\nprint(\"b:\",b)\n\na[0] = 4\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n\nb[1] = 5\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n```\n\n\n\n\n\n\n\nThis happens because a and b are pointing to the same memory location. So if you change a, b will also change. If you want to avoid this, you can use the copy() method.\n\n\n\n\n\n```{pyodide}\nb = a.copy()\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n\na[2] = 6\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n\nb[2] = 7\nprint(\"------\")\nprint(\"a:\",a)\nprint(\"b:\",b)\n```\n\n\n\n\n\n# String Formatting {.unnumbered}\n\n\nYou can use the following escape characters:\n\n- `\\n`: new line\n- `\\t`: tab\n- `\\\\`: backslash\n- `\\'`: single quote\n- `\\\"`: double quote\n- `\\b`: backspace\n- `\\r`: carriage return\n- `\\f`: form feed\n- `\\ooo`: octal value\n- `\\xhh`: hex value\n\n\n\nYou can use the `+` operator to concatenate strings. <br>\n\n\n\n\n\n```{pyodide}\na = \"This \" \nb = \"is a string\"\nprint(a + b)\n```\n\n\n\n\n\nFor print formatting you can use the `format()` method. <br>\nYou can use the `f-string` method. <br>\nSee for more information [here](https://docs.python.org/3/tutorial/inputoutput.html#tut-f-strings)\n\n\n\n\n\n```{pyodide}\na = 1.5434\nb = \"nm\"\nprint(\"This is an integer %d %s\" % (a, b))\nprint(\"This is a float formating with minimum \\\n1 number of character wide and 2 digits %1.2f %s\" % (a, b))\nprint(\"This is scientific notation with \\\n2 digits %.2e %s\" % (a, b))\nprint(\"This is a string %s %s\" % (a, b))\nprint(\"This is an example of using \\\nformat() method {0} {1}\".format(a, b)) \nprint(\"This is an example of using format() \\\nmethod with named arguments {a} {b}\".format(a=a, b=b))\n```\n\n\n\n\n\n\n# Operators {.unnumbered}\n\n\nThere are different types of operators in Python. <br>\n\n\n-  +: addition\n-  -: subtraction\n-  *: multiplication\n-  /: division\n-  %: modulo\n-  **: exponentiation\n-  //: floor division\n-  ==: equal\n-  !=: not equal\n-  <: less than    \n-  >: greater than\n-  <=: less than or equal\n-  >=: greater than or equal\n-  and: logical and\n-  or: logical or\n-  not: logical not\n-  is: identity\n-  in: membership\n\n\n\n\n\n```{pyodide}\na = 5.3\nb = 2\nc = 3\n\nprint(\"division: \", a/b)\nprint(\"division: \", b/c, \" type: \", type(b/c))\nprint(\"integer division: \", a//b)\nprint(\"modulo: \", a%b)\nprint(\"float multiplication: \", a*b, \" type: \", type(a*b))\nprint(\"integer multiplication: \", b*c, \" type: \", type(b*c))\nprint(\"exponentiation: \", a**2)\n```\n\n\n\n\n\n# Control Structures {.unnumbered}\n\n\nThe most common control structures are:\n\n- if\n- else\n- elif\n- for\n- while\n- break\n- continue\n- pass\n- return\n\n\n## if statement {.unnumbered}\n\n\n\n\n\n```{pyodide}\nx = 0\nif x < 0:\n    print(\"x < 0\")\nelif x > 0:\n    print(\"x > 0\")\nelse:\n    print(\"x = 0\")\n```\n\n\n\n\n\n## break,cotinue,pass {.unnumbered}\n#### example break {.unnumbered}\n\n\n\n\n```{pyodide}\n\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)\n```\n\n\n\n\n#### example continue {.unnumbered}\n\n\n\n\n```{pyodide}\n\nfor i in range(10):\n    if i == 5:\n        continue\n    print(i)\n ```   \n\n\n\n\n\n\n#### example pass {.unnumbered}\n\n\n\n\n```{pyodide} \nfor i in range(10):\n    if i == 5:\n        pass\n    print(i)\n```\n\n\n\n\n\n## For Loops {.unnumbered}\n\n\n\n\n\n```{pyodide} \nfor i in range(5): #from 0 to 4 \n    print(i)\n```\n\n```{pyodide} \nfor i in range(1,10,2): # start 1, stop 10 excluded, step 2\n    print(i)\n```\n\n```{pyodide} \nl = list(range(0,10))\n```\n\n```{pyodide} \nl\n```\n\n```{pyodide} \nfor i in l:  # using list\n    print(i)\n```\n\n\n\n\n\n## While Loops {.unnumbered}\n\n\n\n\n\n```{pyodide} \nx = 0\nwhile x  < 4:\n    print(l[x])\n    x = x + 1\n```\n\n```{pyodide} \nprint(\"while loop with continue and break statement\")\nn = 0\nwhile(n < 10):\n    n+=1\n    if n == 5:\n        continue\n    if n == 7:\n        print(\"The loop reached 7 and will break now.\")\n        break\n    print(n)\n```\n\n\n\n\n\n# Functions {.unnumbered}\n\n\nFunctions are defined using the `def` keyword. <br>\nYou can use the `return` keyword to return a value from a function. <br>\nThe parameters of a function are defined in the parentheses. <br>\nMultiple parameters are separated by commas. <br>\nYou can use default values for the parameter *e.g.* `b=5`. <br>\nMultiple return values are separated by commas. <br>\nThey are stored in a tuple. <br>\n\n\n\n\n\n\n```{pyodide} \ndef summation(a,b=5):\n    return a+b, a-b\n```\n\n```{pyodide} \nsummation(4,2)\n```\n\n```{pyodide} \nsum, sub = summation(4)\nprint(sum)\nprint(sub)\n```\n\n```{pyodide} \nx = 3\n\ndef multiple_return_value(x,a,b):\n    n = x+a\n    m = x-b\n    return [n,m]\nprint(multiple_return_value(x,5,10)[0],multiple_return_value(x,5,10)[1])\n```\n\n\n\n\n\n# Style guideline for writing python code {.unnumbered}\n\n\nFor writing a readable code, it is important to follow a style guideline. <br>\nThe most common style guideline for Python is [PEP 8](https://www.python.org/dev/peps/pep-0008/). <br>\n\n\n# Exercises {.unnumbered}\nDownload it locally and try to solve the exercises. <br>\n\n[Basic Python](https://github.com/stkroe/PythonforChemists/blob/main/course/exercises/notebooks/student/BasicExercises.ipynb)\n\n\nOr open it in `Google Colab`:\n\n[Basic Python](https://colab.research.google.com/github/stkroe/PythonforChemists/blob/main/course/exercises/notebooks/student/BasicExercises.ipynb)\n\n",
    "supporting": [
      "Basics_files"
    ],
    "filters": [],
    "includes": {}
  }
}