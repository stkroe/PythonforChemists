{
  "hash": "9cf69d767b077b181c8c5a370aedb7ca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Basic Data Visualization Techniques\"\nformat: live-html\nengine: jupyter\npyodide:\n  packages:\n    - matplotlib\n    - numpy\n    - seaborn\n    - os \n    - argparse\n    - sys\ncode-links:\n      - text: \"Open in Colab\"\n        href: \"https://colab.research.google.com/github/stkroe/PythonForChemists/blob/main/course/chapters/Basics/Lecture1/SimplePlot.ipynb\"\n        icon: \"laptop\"\n---\n\n\n\n\n\n# Basic Data Visualization Technique {.unnumbered}\n\n\nThe most popular data visualization libraries in Python is Matplotlib.\nLet`s start with the basic data visualization techniques using Matplotlib.\n\n\n## 1. Generate some x-y data points. {.unnumbered}\n\n\n\n\n```{pyodide}\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n```\n\n\n\n\n\n\n## 2. Plot the data points. {.unnumbered}\n\n\n\n\n```{pyodide}\nplt.plot(x, y)\n```\n\n\n\n\nTo add more graphs to the same figure, use `plt.plot()` multiple times before `plt.show()`.\nIf you want to create a new figure, use `plt.figure()` before `plt.plot()`.\n\n\n\n\n```{pyodide}\nplt.plot(x,y)\nplt.plot(x,2*y)\nplt.show()\nplt.plot(x, y)\nplt.show()\n```\n\n\n\n\n## 3. Adjust the plot. {.unnumbered}\n\n\nThe `plot()` function takes the following arguments:\n- x-axis data points\n- y-axis data points\n- [color](https://matplotlib.org/stable/users/explain/colors/colors.html): hex, or color name (e.g., 'red', 'blue','black'), abbreviated (e.g., 'r', 'b','k')\n- [linestyle](https://matplotlib.org/stable/gallery/lines_bars_and_markers/linestyles.html): '-', '--', '-.', ':' or \"solid\", \"dashed\", \"dashdot\", \"dotted\"\n- [marker](https://matplotlib.org/stable/api/markers_api.html): 'o', 'x', '+', '*', 's', 'd', '^', 'v', '>', '<', 'p', 'h'\n- linewidth - width of the line\n- alpha - transparency of the line\n- markerfacecolor - color of the marker face\n- markersize - size of the marker\n- label - label for the data points\n\n\n\nYou have to call `plt.legend()` to show the labels.\n\n\n\n\n```{pyodide}\nplt.figure()\nplt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', \n            markerfacecolor='blue', markersize=5,\n            label='sin(x)')\nplt.plot(x, 2*y, color='green', linestyle='dotted', linewidth=2, marker='x',\n            markerfacecolor='yellow', markersize=5,\n            label='2*sin(x)')\nplt.legend()\nplt.show()\n```\n\n\n\n\n## 4. Adust the figure {.unnumbered}\n\n\nThis plot figure can be adjusted by changing the figure size, title, labels, and so on.\n \n- `plt.xlabel()`: Set the x-axis label of the current axis.\n- `plt.ylabel()`: Set the y-axis label of the current axis.\n- `plt.title()`: Set a title for the axes.\n- `plt.legend()`: Place a legend on the axes.\n- `plt.grid()`: Configure the grid lines.\n- `plt.xlim()`: Get or set the x-limits of the current axes.\n- `plt.ylim()`: Get or set the y-limits of the current axes.\n- `plt.xticks()`: Get or set the current tick locations and labels of the x-axis.\n- `plt.yticks()`: Get or set the current tick locations and labels of the y-axis.\n- `plt.figure()`: Create a new figure.\n- `plt.show()`: Display a figure.\n\n\n\n\n```{pyodide}\nplt.figure(figsize=(4, 4), dpi=100)\n# Create a figure with a specific size and resolution\nplt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', \n            markerfacecolor='blue', markersize=5,\n            label='sin(x)')\nplt.plot(x, 2*y, color='green', linestyle='dotted', linewidth=2, marker='x',\n            markerfacecolor='yellow', markersize=5,\n            label='2*sin(x)')\nplt.xlim([0, 10]) # set the x-axis limits\nplt.ylim([-3, 3]) # set the y-axis limits\nplt.xticks(np.arange(0, 11, 2)) # set the x-axis ticks\nplt.yticks(np.arange(-3, 4, 1)) # set the y-axis ticks\nplt.xlabel('x') # set the x-axis label\nplt.ylabel('y') # set the y-axis label\nplt.title('Sine and Double Sine Functions') # set the title of the plot\nplt.grid(linewidth=0.1)# set the grid linewidth\nplt.legend(loc='upper left') # set the location of the legend: upper left, upper right, lower left, lower right\nplt.show()\n```\n\n\n\n\n## Creating multiple plots {.unnumbered}\n\nYou can create multiple plots in the same figure by using the `subplot()` function.\n\n\n\n\n```{pyodide}\nplt.subplot(2, 1, 1)\nplt.plot(x, y1)\n\nplt.subplot(2, 1, 2)\nplt.plot(x, y2)\n```\n\n```{pyodide}\nplt.subplot(2, 1, 1)\nplt.plot(x, y, color='red', linestyle='dashed', linewidth=2, marker='o', \n            markerfacecolor='blue', markersize=5,\n            label='sin(x)')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Sine Function')\nplt.legend()\n\nplt.subplot(2, 1, 2)\nplt.plot(x, 2*y, color='green', linestyle='dotted', linewidth=2, marker='x',\n            markerfacecolor='yellow', markersize=5,\n            label='2*sin(x)')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Double Sine Function')\nplt.legend()   \nplt.tight_layout()\nplt.show()\n```\n\n```{pyodide}\nfig = plt.figure(layout='constrained', facecolor='lightskyblue')\n# Create a figure with a specific layout and background color\n# constrained layout automatically adjusts the subplots to fit the figure\nfig.suptitle('Figure') # set the title of the figure object\nsubL, subR = fig.subfigures(1, 2) # create two subfigures\nsubL.set_facecolor('thistle') # set the background color of the left subfigure\nsub_subL = subL.subplots(2, 1, sharex=True) # create two subplots in the left subfigure\naxL[1].set_xlabel('x [m]')\nsubL.suptitle('Left subfigure') # set the title of the left subfigure\nsubR.set_facecolor('lightyellow') # set the background color of the right subfigure\nsub_subR = subR.subplots(1, 2, sharey=True) \nsub_subR[0].set_title('Axes 1') # set the title of the first subplot in the right subfigure\nsub_subR[1].set_title('Axes 2') # set the title of the second subplot in the right subfigure\nsubR.suptitle('Right subfigure')\n```\n\n\n\n\n\nLet`s try to create 4x3 subplots with specific adjustments.\n- `plt.subplots(4, 3)`: create 4x3 subplots\n- `figsize=(3, 4)`: set the figure size to 3x4 inches\n- `sharex=True`: all subplots share the x-axis\n- `sharey=True`: all subplots share the y-axis\n-  `constraint_layout=True`: automatically adjust the subplot parameters to give the specified padding around the subplots\n- `gridspec_kw={'hspace': 0.5, 'wspace': 0.5}`: set the horizontal and vertical space between the subplots to 0.5 inches\n\n\nPlay with the code below to understand the different parameters: {.unnumbered}\n\n\n\n\n```{pyodide}\nfig, ax = plt.subplots(4,3, figsize=(2.55,4), dpi=100, sharex=True, sharey=True, constrained_layout=True,gridspec_kw={'hspace': 0.1, 'wspace': 0.1})\n\nfor i in range(4):\n    for j in range(3):\n        ax[i,j].plot(x, y*(i+1)*(j+1))\n\nplt.show()\n\n```\n\n",
    "supporting": [
      "SimplePlot_files"
    ],
    "filters": [],
    "includes": {}
  }
}